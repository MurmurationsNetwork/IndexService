name: PR Workflow

# Trigger the workflow on pull request events targeting the main branch.
on:
  pull_request:
    branches:
      - main
    paths:
      - "cmd/**"
      - "services/**"
      - "pkg/**"

jobs:
  # Job to run tests.
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.5

      - name: Execute Tests
        run: make test

  # Job to lint the code.
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.5

      - name: Run Linter
        uses: golangci/golangci-lint-action@v3

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      index_changes_detected: ${{ steps.check_index_changes.outputs.index_changes_detected }}
      library_changes_detected: ${{ steps.check_library_changes.outputs.library_changes_detected }}
      geoip_changes_detected: ${{ steps.check_geoip_changes.outputs.geoip_changes_detected }}
      validation_changes_detected: ${{ steps.check_validation_changes.outputs.validation_changes_detected }}
      dataproxy_changes_detected: ${{ steps.check_dataproxy_changes.outputs.dataproxy_changes_detected }}
      nodecleaner_changes_detected: ${{ steps.check_nodecleaner_changes.outputs.nodecleaner_changes_detected }}
      revalidatenode_changes_detected: ${{ steps.check_revalidatenode_changes.outputs.revalidatenode_changes_detected }}
      schemaparser_changes_detected: ${{ steps.check_schemaparser_changes.outputs.schemaparser_changes_detected }}
      dataproxyupdater_changes_detected: ${{ steps.check_dataproxyupdater_changes.outputs.dataproxyupdater_changes_detected }}
      dataproxyrefresher_changes_detected: ${{ steps.check_dataproxyrefresher_changes.outputs.dataproxyrefresher_changes_detected }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for Path Changes - Index Service
        id: check_index_changes
        run: bash ./scripts/check-path-changes.sh index

      - name: Check for Path Changes - Library Service
        id: check_library_changes
        run: bash ./scripts/check-path-changes.sh library

      - name: Check for Path Changes - GeoIP Service
        id: check_geoip_changes
        run: bash ./scripts/check-path-changes.sh geoip

      - name: Check for Path Changes - Validation Service
        id: check_validation_changes
        run: bash ./scripts/check-path-changes.sh validation

      - name: Check for Path Changes - DataProxy Service
        id: check_dataproxy_changes
        run: bash ./scripts/check-path-changes.sh dataproxy

      - name: Check for Path Changes - NodeCleaner Service
        id: check_nodecleaner_changes
        run: bash ./scripts/check-path-changes.sh nodecleaner

      - name: Check for Path Changes - RevalidateNode Service
        id: check_revalidatenode_changes
        run: bash ./scripts/check-path-changes.sh revalidatenode

      - name: Check for Path Changes - SchemaParser Service
        id: check_schemaparser_changes
        run: bash ./scripts/check-path-changes.sh schemaparser

      - name: Check for Path Changes - DataProxyUpdater Service
        id: check_dataproxyupdater_changes
        run: bash ./scripts/check-path-changes.sh dataproxyupdater

      - name: Check for Path Changes - DataProxyRefresher Service
        id: check_dataproxyrefresher_changes
        run: bash ./scripts/check-path-changes.sh dataproxyrefresher

  # Job to build Docker images for various services.
  build:
    name: Build Docker Image - ${{ matrix.service }}
    if: >
      (matrix.service == 'index' && needs.check-changes.outputs.index_changes_detected == 'true') ||
      (matrix.service == 'library' && needs.check-changes.outputs.library_changes_detected == 'true') ||
      (matrix.service == 'geoip' && needs.check-changes.outputs.geoip_changes_detected == 'true') ||
      (matrix.service == 'validation' && needs.check-changes.outputs.validation_changes_detected == 'true') ||
      (matrix.service == 'dataproxy' && needs.check-changes.outputs.dataproxy_changes_detected == 'true') ||
      (matrix.service == 'nodecleaner' && needs.check-changes.outputs.nodecleaner_changes_detected == 'true') ||
      (matrix.service == 'revalidatenode' && needs.check-changes.outputs.revalidatenode_changes_detected == 'true') ||
      (matrix.service == 'schemaparser' && needs.check-changes.outputs.schemaparser_changes_detected == 'true') ||
      (matrix.service == 'dataproxyupdater' && needs.check-changes.outputs.dataproxyupdater_changes_detected == 'true') ||
      (matrix.service == 'dataproxyrefresher' && needs.check-changes.outputs.dataproxyrefresher_changes_detected == 'true')
    needs: [test, lint, check-changes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # - service: index
          - service: library
          # - service: geoip
          # - service: validation
          # - service: dataproxy
          # - service: nodecleaner
          # - service: revalidatenode
          # - service: schemaparser
          # - service: dataproxyupdater
          # - service: dataproxyrefresher
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish Docker Image
        run: make docker-push-${{ matrix.service }}

  # Job to deploy the application to Kubernetes.
  deploy:
    name: Deploy Service - ${{ matrix.service }}
    if: >
      (matrix.service == 'index' && needs.check-changes.outputs.index_changes_detected == 'true') ||
      (matrix.service == 'library' && needs.check-changes.outputs.library_changes_detected == 'true') ||
      (matrix.service == 'geoip' && needs.check-changes.outputs.geoip_changes_detected == 'true') ||
      (matrix.service == 'validation' && needs.check-changes.outputs.validation_changes_detected == 'true') ||
      (matrix.service == 'dataproxy' && needs.check-changes.outputs.dataproxy_changes_detected == 'true') ||
      (matrix.service == 'nodecleaner' && needs.check-changes.outputs.nodecleaner_changes_detected == 'true') ||
      (matrix.service == 'revalidatenode' && needs.check-changes.outputs.revalidatenode_changes_detected == 'true') ||
      (matrix.service == 'schemaparser' && needs.check-changes.outputs.schemaparser_changes_detected == 'true') ||
      (matrix.service == 'dataproxyupdater' && needs.check-changes.outputs.dataproxyupdater_changes_detected == 'true') ||
      (matrix.service == 'dataproxyrefresher' && needs.check-changes.outputs.dataproxyrefresher_changes_detected == 'true')
    needs: [test, lint, check-changes, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # - service: index
          - service: library
          # - service: geoip
          # - service: validation
          # - service: dataproxy
          # - service: nodecleaner
          # - service: revalidatenode
          # - service: schemaparser
          # - service: dataproxyupdater
          # - service: dataproxyrefresher
    env:
      PRETEST_SERVER_IP: ${{ secrets.PRETEST_SERVER_IP }}
      PRETEST_KUBECONFIG_PATH: ${{ secrets.PRETEST_KUBECONFIG_PATH }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup SSH for Server Access
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Key to Known Hosts
        run: |
          ssh-keyscan -H ${{ env.PRETEST_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy Kubernetes Config from Server
        run: |
          scp root@${{ env.PRETEST_SERVER_IP }}:${{ env.PRETEST_KUBECONFIG_PATH }} \
          ./kubeconfig

      - name: Replace Localhost IP in Kubeconfig
        run: |
          sed -i 's/https:\/\/127.0.0.1:6443/https:\/\/${{ env.PRETEST_SERVER_IP }}:6443/' \
          ./kubeconfig

      - uses: azure/setup-kubectl@v3
        with:
          version: latest
        id: install

      - name: Deploy Service
        env:
          KUBECONFIG: ./kubeconfig
        run: make deploy-${{ matrix.service }} DEPLOY_ENV=pretest
