# This is a GitHub Actions workflow file that defines a workflow named test. The
# workflow is triggered by a push event on the main branch and automates the
# build, test, and deployment process for the project's components. The workflow
# uses make commands to build and publish Docker images for each component and
# deploys the components to a Kubernetes cluster on DigitalOcean.

name: test

on:
  push:
    branches:
      - main

jobs:

# The `test` job executes unit tests for the project and consists of three
# steps. The first step uses the actions/checkout action to check out the code
# for the project. The second step uses the actions/setup-go action to set up
# the Go environment with version 1.19.5. The third step runs the make test
# command, which is defined in the project's Makefile and runs the tests for the
# project.

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.5

      - name: Test
        run: make test

# This `build-*` jobs build and publish Docker images for different components
# of the project. Each job runs on an ubuntu-latest runner and has three steps.
# The first step uses the actions/checkout action to check out the code for the
# project. The second step uses the docker/login-action action to log in to
# DockerHub using the secrets.DOCKERHUB_USERNAME and secrets.DOCKERHUB_TOKEN
# secrets. The third step runs a make command to build and publish the Docker
# image for the component.

  build-index:
    name: Build Index
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish index docker images
        run: make docker-push-index

  build-library:
    name: Build Library
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish library docker images
        run: make docker-push-library

  build-geoip:
    name: Build Geo IP
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish geoip docker images
        run: make docker-push-geoip

  build-validation:
    name: Build Validation
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish validation docker images
        run: make docker-push-validation

  build-nodecleaner:
    name: Build Node Cleaner
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish nodecleaner docker images
        run: make docker-push-nodecleaner

  build-revalidatenode:
    name: Build Revalidate Node
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish revalidatenode docker images
        run: make docker-push-revalidatenode

  build-schemaparser:
    name: Build Schema Parser
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish schemaparser docker images
        run: make docker-push-schemaparser

  build-dataproxy:
    name: Build Data Proxy
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish dataproxy docker images
        run: make docker-push-dataproxy

  build-dataproxyupdater:
    name: Build Data Proxy Updater
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish dataproxyupdater docker images
        run: make docker-push-dataproxyupdater

  build-dataproxyrefresher:
    name: Build Data Proxy Refresher
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish dataproxyrefresher docker images
        run: make docker-push-dataproxyrefresher

# The `deploy` job automates the deployment process for the project's
# components. The job is triggered by the completion of several other jobs,
# which are specified using the needs key. The job runs on an ubuntu-latest
# runner and deploys various components of the project to a Kubernetes cluster
# on DigitalOcean.

# The job consists of several steps that use the make command to restart the
# deployments for each component. The first step uses the actions/checkout
# action to check out the code for the project. The second step installs doctl,
# a command-line tool for managing DigitalOcean resources, and saves the
# kubeconfig for the Kubernetes cluster with short-lived credentials. The
# remaining steps restart the deployments for each component using the make
# deploy-<component> command.

  deploy:
    name: Deploy
    needs: [ build-index, build-library, build-geoip, build-validation, build-nodecleaner, build-revalidatenode, build-schemaparser, build-dataproxy, build-dataproxyupdater, build-dataproxyrefresher ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 murmtest

      - name: Restart index deployment
        run: make deploy-index DEPLOY_ENV=staging

      - name: Restart library deployment
        run: make deploy-library DEPLOY_ENV=staging

      - name: Restart geoip deployment
        run: make deploy-geoip DEPLOY_ENV=staging

      - name: Restart validation deployment
        run: make deploy-validation DEPLOY_ENV=staging

      - name: Restart nodecleaner deployment
        run: make deploy-nodecleaner DEPLOY_ENV=staging

      - name: Restart revalidatenode deployment
        run: make deploy-revalidatenode DEPLOY_ENV=staging

      - name: Restart schemaparser deployment
        run: make deploy-schemaparser DEPLOY_ENV=staging

      - name: Restart dataproxy deployment
        run: make deploy-dataproxy DEPLOY_ENV=staging

      - name: Restart dataproxyupdater deployment
        run: make deploy-dataproxyupdater DEPLOY_ENV=staging

      - name: Restart dataproxyrefresher deployment
        run: make deploy-dataproxyrefresher DEPLOY_ENV=staging

# This job automates the end-to-end testing process for the project's
# components. The job is triggered by the completion of the deploy job, and uses
# the newman tool to execute the end-to-end tests and a custom shell script to
# check the availability of the endpoints.

  e2e_test:
    name: E2E Test
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Newman Installation
        run: |
          npm install
          npm install -g newman

      - name: Test Index
        run: ./wait_for_timeout.sh https://test-index.murmurations.network/v2/ping 200 300

      - name: Test Library
        run: ./wait_for_timeout.sh https://test-library.murmurations.network/v2/ping 200 300

      - name: Test Data Proxy
        run: ./wait_for_timeout.sh https://test-data-proxy.murmurations.network/v1/ping 200 300

      - name: Newman E2E Test
        run: make newman-test DEPLOY_ENV=staging
