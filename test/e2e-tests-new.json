{
    "info": {
        "name": "Murmurations Services API Tests",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Ping Tests",
            "item": [
                {
                    "name": "Index is online",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"pong!\"`, () => {",
                                    "    pm.response.to.have.body(\"pong!\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrl}}/ping",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "ping"
                            ]
                        }
                    }
                },
                {
                    "name": "Library is online",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"pong!\"`, () => {",
                                    "    pm.response.to.have.body(\"pong!\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{libraryBaseUrl}}/ping",
                            "host": [
                                "{{libraryBaseUrl}}"
                            ],
                            "path": [
                                "ping"
                            ]
                        }
                    }
                },
                {
                    "name": "DataProxy is online",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"pong!\"`, () => {",
                                    "    pm.response.to.have.body(\"pong!\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{dataProxyBaseUrl}}/ping",
                            "host": [
                                "{{dataProxyBaseUrl}}"
                            ],
                            "path": [
                                "ping"
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','Ping Tests')"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Library Tests",
            "item": [
                {
                    "name": "Library returns a list of schemas",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return at least 1 result`, () => {",
                                    "    pm.expect(jsonData.data.length).to.be.greaterThan(0)",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{libraryBaseUrl}}/schemas",
                            "host": [
                                "{{libraryBaseUrl}}"
                            ],
                            "path": [
                                "schemas"
                            ]
                        }
                    }
                },
                {
                    "name": "Library returns a test schema",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct $id`, () => {",
                                    "    pm.expect(jsonData.$id).to.contain('test_schema-v2.0.0')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{libraryBaseUrl}}/schemas/test_schema-v2.0.0",
                            "host": [
                                "{{libraryBaseUrl}}"
                            ],
                            "path": [
                                "schemas",
                                "test_schema-v2.0.0"
                            ]
                        }
                    }
                },
                {
                    "name": "Library returns a list of countries",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return aruba in AW country code`, () => {",
                                    "    pm.expect(jsonData[\"AW\"]).contains(\"aruba\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{libraryBaseUrl}}/countries",
                            "host": [
                                "{{libraryBaseUrl}}"
                            ],
                            "path": [
                                "countries"
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','Library Tests')"
                        ]
                    }
                }
            ]
        },
        {
            "name": "V1 Routes Deprecated",
            "item": [
                {
                    "name": "POST /nodes",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 410`, () => {",
                                    "    pm.response.to.have.status(410)",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"profile_url\": \"https://ic3.dev/murmurations/valid-profile.json\"}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrlV1}}/nodes",
                            "host": [
                                "{{indexBaseUrlV1}}"
                            ],
                            "path": [
                                "nodes"
                            ]
                        }
                    }
                },
                {
                    "name": "POST /nodes-sync",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 410`, () => {",
                                    "    pm.response.to.have.status(410)",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"profile_url\": \"https://ic3.dev/murmurations/valid-profile.json\"}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrlV1}}/nodes-sync",
                            "host": [
                                "{{indexBaseUrlV1}}"
                            ],
                            "path": [
                                "nodes-sync"
                            ]
                        }
                    }
                },
                {
                    "name": "GET /nodes",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 410`, () => {",
                                    "    pm.response.to.have.status(410)",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrlV1}}/nodes",
                            "host": [
                                "{{indexBaseUrlV1}}"
                            ],
                            "path": [
                                "nodes"
                            ]
                        }
                    }
                },
                {
                    "name": "GET /nodes/:node_id",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 410`, () => {",
                                    "    pm.response.to.have.status(410)",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrlV1}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrlV1}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "DELETE /nodes/:node_id",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 410`, () => {",
                                    "    pm.response.to.have.status(410)",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{indexBaseUrlV1}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrlV1}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "GET /schemas",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 410`, () => {",
                                    "    pm.response.to.have.status(410)",
                                    "})",
                                    "pm.variables.set(\"test_counter\", 0)"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{libraryBaseUrlV1}}/schemas",
                            "host": [
                                "{{libraryBaseUrlV1}}"
                            ],
                            "path": [
                                "schemas"
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','V1 Routes Deprecated')"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Handles Missing Nodes",
            "item": [
                {
                    "name": "Does not find non-existent node",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 404`, () => {",
                                    "    pm.response.to.have.status(404)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"title\" parameter`, () => {",
                                    "    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"Could not find node_id\" message`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.contain(\"Could not locate the following node_id\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "999999",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Does not accept blank/missing profile_url",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return missing profile_url error title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.eq(\"Missing Required Property\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return missing profile_url error detail`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.eq(\"The `profile_url` property is required.\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"profile_url\": \"\"}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes"
                            ]
                        }
                    }
                },
                {
                    "name": "Accepts non-existent profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.environment.set(\"node0\", jsonData.data.node_id)"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"profile_url\": \"https://ic3.dev/non-existent-profile-url.json\"}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes"
                            ]
                        }
                    }
                },
                {
                    "name": "Returns failure info about non-existent profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 404`, () => {",
                                    "    pm.response.to.have.status(404)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"node_id\" parameter`, () => {",
                                    "    pm.expect(jsonData.meta).to.have.property(\"node_id\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"Profile Not Found\" title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.eq(\"Profile Not Found\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"Could not read from profile_url`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.contain(\"Could not find or read from (invalid JSON) the profile_url\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "setTimeout(function(){}, 100);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node0}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Removes non-existent profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"message\" parameter`, () => {",
                                    "    pm.expect(jsonData.meta).to.have.property(\"message\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"removed profile\" message`, () => {",
                                    "    pm.expect(jsonData.meta.message).to.contain(\"has recorded as deleted\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node0}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Does not find deleted record for non-existent profile_url",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 404`, () => {",
                                    "    pm.response.to.have.status(404)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 404`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(404)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"title\" parameter`, () => {",
                                    "    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"could not find node_id\" detail`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.eq(`Could not locate the following node_id in the Index: ${pm.environment.get(\"node0\")}`)",
                                    "})",
                                    "pm.environment.unset(\"node0\")"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "setTimeout(function(){}, 100);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node0}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','Handles Missing Nodes')"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Handles Invalid Profiles",
            "item": [
                {
                    "name": "Accepts profile with validation errors",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.environment.set(\"node00\", jsonData.data.node_id)",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct hash of profile_url`, () => {",
                                    "    pm.expect(jsonData.data.node_id).to.eq(\"98af871c2ba20bc1a5a3dc4fa39d49a1a0bea14787d698a39d46e0d04cb9269c\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"profile_url\": \"https://ic3.dev/murmurations/invalid-geopoints.json\"}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes"
                            ]
                        }
                    }
                },
                {
                    "name": "Returns details of invalid profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not have _id property`, () => {",
                                    "    pm.expect(jsonData.meta).to.not.have.property(\"_id\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should have node_id property`, () => {",
                                    "    pm.expect(jsonData.meta).to.have.property(\"node_id\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct node_id`, () => {",
                                    "    pm.expect(jsonData.meta.node_id).to.eq(\"98af871c2ba20bc1a5a3dc4fa39d49a1a0bea14787d698a39d46e0d04cb9269c\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct profile_url`, () => {",
                                    "    pm.expect(jsonData.meta.profile_url).to.eq(\"https://ic3.dev/murmurations/invalid-geopoints.json\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not have profile_hash property`, () => {",
                                    "    pm.expect(jsonData.meta).to.not.have.property(\"profile_hash\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not return linked_schemas list`, () => {",
                                    "    pm.expect(jsonData.meta).to.not.have.property(\"linked_schemas\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not have last_updated property`, () => {",
                                    "    pm.expect(jsonData.meta).to.not.have.property(\"last_updated\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "setTimeout(function(){}, 100);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node00}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Cannot delete invalid profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"title\" parameter`, () => {",
                                    "    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"profile still exists\" message`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain(\"Profile Still Exists\")",
                                    "})",
                                    "pm.environment.unset(\"node00\")"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node00}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','Handles Invalid Profiles')"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Handles Valid Profiles",
            "item": [
                {
                    "name": "Accepts valid profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.environment.set(\"node000\", jsonData.data.node_id)",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct hash of profile_url`, () => {",
                                    "    pm.expect(jsonData.data.node_id).to.eq(\"8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"profile_url\": \"https://ic3.dev/murmurations/valid-profile.json\"}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes"
                            ]
                        }
                    }
                },
                {
                    "name": "Returns details of validated profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not have _id property`, () => {",
                                    "    pm.expect(jsonData.data).to.not.have.property(\"_id\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should have node_id property`, () => {",
                                    "    pm.expect(jsonData.data).to.have.property(\"node_id\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct node_id`, () => {",
                                    "    pm.expect(jsonData.data.node_id).to.eq(\"8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct profile_url`, () => {",
                                    "    pm.expect(jsonData.data.profile_url).to.eq(\"https://ic3.dev/murmurations/valid-profile.json\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct profile_hash`, () => {",
                                    "    pm.expect(jsonData.data.profile_hash).to.eq(\"4fb2953fe653771d33e0b3b3317901db781b4aaace9bbde890558e7ca4fa3088\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not return linked_schemas list`, () => {",
                                    "    pm.expect(jsonData.data).to.not.have.property(\"linked_schemas\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct status`, () => {",
                                    "    pm.expect(jsonData.data.status).to.eq(\"posted\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should not have last_validated property`, () => {",
                                    "    pm.expect(jsonData.data).to.not.have.property(\"last_validated\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should have last_updated property`, () => {",
                                    "    pm.expect(jsonData.data).to.have.property(\"last_updated\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - last_updated property should be a number`, () => {",
                                    "    pm.expect(jsonData.data.last_updated).to.be.a(\"number\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "setTimeout(function(){}, 100);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node000}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Cannot delete posted profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"title\" parameter`, () => {",
                                    "    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return \"Profile Still Exists\" message`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain(\"Profile Still Exists\")",
                                    "})",
                                    "pm.environment.unset(\"node000\")",
                                    "pm.variables.set(\"test_counter\", 0)"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{indexBaseUrl}}/nodes/:node_id",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "nodes",
                                ":node_id"
                            ],
                            "variable": [
                                {
                                    "key": "node_id",
                                    "value": "{{node000}}",
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','Handles Valid Profiles')"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Performs Profile Validation",
            "item": [
                {
                    "name": "Profile with invalid property type",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain('Invalid Type')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[\"test_schema-v1.0.0\"],\"name\": \"IC3 Dev\",\"geolocation\":{\"lat\":\"11.111111\",\"lon\":\"12.121212\"}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with missing required property",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain('Missing Required Property')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[\"test_schema-v1.0.0\"],\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\":11.111111}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with invalid mix/max amounts",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure reason`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.equal('Invalid Amount')",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure reason`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.contain('than or equal to')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[\"test_schema-v1.0.0\"],\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\": 91,\"lon\":-181}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with missing schema",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 404`, () => {",
                                    "    pm.response.to.have.status(404)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 404`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(404)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain('Error loading schema')",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure detail`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.contain('404 Not Found')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[\"test_schema-v1.0.0\",\"test_schema-v0.0.1\"],\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\":11.111111,\"lon\":12.121212 }}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with no linked schemas",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain('Missing Required Property')",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure detail`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.contain('The `linked_schemas` property is required.')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\":11.111111,\"lon\":12.121212}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with Invalid JSON",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.equal('JSON Error')",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure detail`, () => {",
                                    "    pm.expect(jsonData.errors[0].detail).to.equal('The JSON document submitted could not be parsed.')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "INVALID",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with invalid pattern",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 404`, () => {",
                                    "    pm.response.to.have.status(404)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[1].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[1].title).to.contain('Pattern Mismatch')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[\"test_schema-v1.0\"],\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\": 11.111111,\"lon\":12.121212}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile with no schema",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 400`, () => {",
                                    "    pm.response.to.have.status(400)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status 400`, () => {",
                                    "    pm.expect(jsonData.errors[0].status).to.equal(400)",
                                    "})",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct failure title`, () => {",
                                    "    pm.expect(jsonData.errors[0].title).to.contain('Not Enough Items')",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[],\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\":11.111111,\"lon\":12.121212}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                },
                {
                    "name": "Profile that validates",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return status code 200`, () => {",
                                    "    pm.response.to.have.status(200)",
                                    "})",
                                    "var jsonData = pm.response.json();",
                                    "pm.test(`${pm.variables.get(\"folder_name\")} - ${pm.info.requestName} - should return correct message`, () => {",
                                    "    pm.expect(jsonData.meta.message).to.equal(\"The submitted profile was validated successfully to its linked schemas.\")",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\"linked_schemas\":[\"test_schema-v1.0.0\"],\"name\":\"IC3 Dev\",\"geolocation\":{\"lat\":11.111111,\"lon\":12.121212}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{indexBaseUrl}}/validate",
                            "host": [
                                "{{indexBaseUrl}}"
                            ],
                            "path": [
                                "validate"
                            ]
                        }
                    }
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.variables.set('folder_name','Performs Profile Validation')"
                        ]
                    }
                }
            ]
        }
    ]
}
