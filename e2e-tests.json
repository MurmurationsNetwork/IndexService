{
	"info": {
		"_postman_id": "c985860d-4b36-44da-9d69-79f8a19af2c8",
		"name": "Murmurations API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1062898"
	},
	"item": [
		{
			"name": "Initial checks",
			"item": [
				{
					"name": "Index is online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"pong!\"`, () => {",
									"    pm.response.to.have.body(\"pong!\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/ping",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Library is online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"pong!\"`, () => {",
									"    pm.response.to.have.body(\"pong!\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{libraryBaseUrl}}/ping",
							"host": [
								"{{libraryBaseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "DataProxy is online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"pong!\"`, () => {",
									"    pm.response.to.have.body(\"pong!\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dataProxyBaseUrl}}/ping",
							"host": [
								"{{dataProxyBaseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Library returns a list of schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least 1 result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{libraryBaseUrl}}/schemas",
							"host": [
								"{{libraryBaseUrl}}"
							],
							"path": [
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Library returns a test schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct $id`, () => {",
									"    pm.expect(jsonData.$id).to.contain('test_schema-v2.0.0.json')",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{libraryBaseUrl}}/schemas/test_schema-v2.0.0",
							"host": [
								"{{libraryBaseUrl}}"
							],
							"path": [
								"schemas",
								"test_schema-v2.0.0"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Initial checks');",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Handles missing nodes & invalid profiles",
			"item": [
				{
					"name": "Does not find non-existent node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"title\" parameter`, () => {",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"Could not find node_id\" message`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain(\"Could not locate the following node_id\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "999999",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Does not accept blank/missing profile_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return missing profile_url error title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.eq(\"Missing Required Property\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return missing profile_url error detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.eq(\"The `profile_url` property is required.\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accepts non-existent profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"node0\", jsonData.data.node_id)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/non-existent-profile-url.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns failure info about non-existent profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"node_id\" parameter`, () => {",
									"    pm.expect(jsonData.meta).to.have.property(\"node_id\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"Profile Not Found\" title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.eq(\"Profile Not Found\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"Could not read from profile_url`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain(\"Could not find or read from (invalid JSON) the profile_url\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node0}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Removes non-existent profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"message\" parameter`, () => {",
									"    pm.expect(jsonData.meta).to.have.property(\"message\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"removed profile\" message`, () => {",
									"    pm.expect(jsonData.meta.message).to.contain(\"has recorded as deleted\")",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node0}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Does not find deleted record for non-existent profile_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 404`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(404)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"title\" parameter`, () => {",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"could not find node_id\" detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.eq(`Could not locate the following node_id in the Index: ${pm.environment.get(\"node0\")}`)",
									"})",
									"",
									"pm.environment.unset(\"node0\")",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node0}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accepts profile with validation errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"node00\", jsonData.data.node_id)",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct hash of profile_url`, () => {",
									"    pm.expect(jsonData.data.node_id).to.eq(\"98af871c2ba20bc1a5a3dc4fa39d49a1a0bea14787d698a39d46e0d04cb9269c\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/invalid-geopoints.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns details of invalid profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not have _id property`, () => {",
									"    pm.expect(jsonData.meta).to.not.have.property(\"_id\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should have node_id property`, () => {",
									"    pm.expect(jsonData.meta).to.have.property(\"node_id\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct node_id`, () => {",
									"    pm.expect(jsonData.meta.node_id).to.eq(\"98af871c2ba20bc1a5a3dc4fa39d49a1a0bea14787d698a39d46e0d04cb9269c\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct profile_url`, () => {",
									"    pm.expect(jsonData.meta.profile_url).to.eq(\"https://ic3.dev/murmurations/invalid-geopoints.json\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not have profile_hash property`, () => {",
									"    pm.expect(jsonData.meta).to.not.have.property(\"profile_hash\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not return linked_schemas list`, () => {",
									"    pm.expect(jsonData.meta).to.not.have.property(\"linked_schemas\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not have last_updated property`, () => {",
									"    pm.expect(jsonData.meta).to.not.have.property(\"last_updated\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node00}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot delete invalid profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"title\" parameter`, () => {",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"profile still exists\" message`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain(\"Profile Still Exists\")",
									"})",
									"",
									"pm.environment.unset(\"node00\")",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node00}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Handles missing nodes & invalid profiles');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Handles valid profile",
			"item": [
				{
					"name": "Accepts valid profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"node000\", jsonData.data.node_id)",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct hash of profile_url`, () => {",
									"    pm.expect(jsonData.data.node_id).to.eq(\"8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/valid-profile.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns details of validated profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not have _id property`, () => {",
									"    pm.expect(jsonData.data).to.not.have.property(\"_id\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should have node_id property`, () => {",
									"    pm.expect(jsonData.data).to.have.property(\"node_id\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct node_id`, () => {",
									"    pm.expect(jsonData.data.node_id).to.eq(\"8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct profile_url`, () => {",
									"    pm.expect(jsonData.data.profile_url).to.eq(\"https://ic3.dev/murmurations/valid-profile.json\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct profile_hash`, () => {",
									"    pm.expect(jsonData.data.profile_hash).to.eq(\"6f2e7a7d74538dc393ee090ca72a5c97931c558ab8aadbedd456f35daeed950b\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not return linked_schemas list`, () => {",
									"    pm.expect(jsonData.data).to.not.have.property(\"linked_schemas\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct status`, () => {",
									"    pm.expect(jsonData.data.status).to.eq(\"posted\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should not have last_validated property`, () => {",
									"    pm.expect(jsonData.data).to.not.have.property(\"last_validated\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should have last_updated property`, () => {",
									"    pm.expect(jsonData.data).to.have.property(\"last_updated\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - last_updated property should be a number`, () => {",
									"    pm.expect(jsonData.data.last_updated).to.be.a(\"number\")",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node000}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot delete posted profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"title\" parameter`, () => {",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"Profile Still Exists\" message`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain(\"Profile Still Exists\")",
									"})",
									"",
									"pm.environment.unset(\"node000\")",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "{{node000}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Handles valid profile');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add test profiles",
			"item": [
				{
					"name": "Post node 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-1.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-2.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-3.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-4.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-5.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-6.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Add test profiles');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Returns expected search results",
			"item": [
				{
					"name": "Search by geolocation range 10km",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least one result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(1)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 6000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?lat=51.493518&lon=0.009199&range=10km",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "lat",
									"value": "51.493518"
								},
								{
									"key": "lon",
									"value": "0.009199"
								},
								{
									"key": "range",
									"value": "10km"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by geolocation range 100mi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least two results`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(2)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?lat=51.493518&lon=0.009199&range=100mi",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "lat",
									"value": "51.493518"
								},
								{
									"key": "lon",
									"value": "0.009199"
								},
								{
									"key": "range",
									"value": "100mi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by locality fuzzy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least one result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(1)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?locality=Londn",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "locality",
									"value": "Londn"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by locality fuzzy case-insensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least one result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(1)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?locality=lONDN",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "locality",
									"value": "lONDN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return two results`, () => {",
									"    pm.expect(jsonData.data.length).to.eq(2)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?page_size=2",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "page_size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by tag with exact match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should only return results with an exactly matched tag`, () => {",
									"    let notFoundInAll = false",
									"    jsonData.data.forEach(e => {",
									"        let found",
									"        e.tags.find(e => e.toUpperCase() === 'BEER' ? found = true : null )",
									"        if (!found) notFoundInAll = true",
									"    })",
									"    pm.expect(notFoundInAll).to.be.false",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?tags=Beer&tags_exact=true",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "tags",
									"value": "Beer"
								},
								{
									"key": "tags_exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by tag with fuzzy match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// the profiles with \"beer\" and \"bees\" should be fuzzy matched to \"beez\"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least three results`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(3)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?tags=Beez&tags_filter=or",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "tags",
									"value": "Beez"
								},
								{
									"key": "tags_filter",
									"value": "or"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by tags with AND filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// should only return the one profile with both tags",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return one result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.eq(1)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?tags=Beer,Sausages&tags_filter=and",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "tags",
									"value": "Beer,Sausages"
								},
								{
									"key": "tags_filter",
									"value": "and"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by tag with spelling error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// should fuzzy match the profile with \"friuts\" as a tag",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least one result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(1)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?tags=fruit",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "tags",
									"value": "fruit"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Returns expected search results');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Post node with synchronous response",
			"item": [
				{
					"name": "Returns posted status for a valid profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return posted status`, () => {",
									"    pm.expect(jsonData.data.status).to.contain('posted')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-1.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes-sync",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns profile not found for non-existent profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return non-existent profile title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.eq('Profile Not Found')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return non-existent profile detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain('Could not find or read from (invalid JSON) the profile_url')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return non-existent profile detail`, () => {",
									"    pm.expect(jsonData.meta.profile_url).to.contain('https://ic3.dev/murmurations/does-not-exist.json')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/does-not-exist.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes-sync",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns profile not found for invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return invalid profile title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.eq('Profile Not Found')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return invalid profile detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain('Could not find or read from (invalid JSON) the profile_url')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/invalid-json.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes-sync",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns profile not found for failed schema validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"title\" parameter`, () => {",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"title\")",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return \"Missing Required Property\" status`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.eq(\"Missing Required Property\")",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/invalid-geopoints.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes-sync",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes-sync"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Post node with synchronous response');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "V1 routes are deprecated",
			"item": [
				{
					"name": "POST /nodes v1 410",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 410`, () => {",
									"    pm.response.to.have.status(410)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/valid-profile.json\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrlV1}}/nodes",
							"host": [
								"{{indexBaseUrlV1}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /nodes-sync v1 410",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 410`, () => {",
									"    pm.response.to.have.status(410)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/valid-profile.json\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrlV1}}/nodes-sync",
							"host": [
								"{{indexBaseUrlV1}}"
							],
							"path": [
								"nodes-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /nodes v1 410",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 410`, () => {",
									"    pm.response.to.have.status(410)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrlV1}}/nodes",
							"host": [
								"{{indexBaseUrlV1}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /nodes/:node_id v1 410",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 410`, () => {",
									"    pm.response.to.have.status(410)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrlV1}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrlV1}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /nodes/:node_id v1 410",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 410`, () => {",
									"    pm.response.to.have.status(410)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrlV1}}/nodes/:node_id",
							"host": [
								"{{indexBaseUrlV1}}"
							],
							"path": [
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "node_id",
									"value": "8c8e0d839e329be11fd8c8e617104d8254502551bc3bdcf9edb96f6dc82155b8",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /nodes v2 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /schemas v1 410",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 410`, () => {",
									"    pm.response.to.have.status(410)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{libraryBaseUrlV1}}/schemas",
							"host": [
								"{{libraryBaseUrlV1}}"
							],
							"path": [
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','V1 routes are deprecated');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Validate profiles",
			"item": [
				{
					"name": "Profile with invalid property type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain('Invalid Type')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [\n    \"test_schema-v1.0.0\"\n  ],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": \"11.111111\",\n    \"lon\": \"12.121212\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with missing required property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain('Missing Required Property')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [\n    \"test_schema-v1.0.0\"\n  ],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 11.111111\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with invalid mix/max amounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure reason`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.equal('Invalid Amount')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure reason`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain('than or equal to')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [\n    \"test_schema-v1.0.0\"\n  ],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 91,\n    \"lon\": -181\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with missing schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 404`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(404)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain('Schema Not Found')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain('Could not locate the following schema in the Library: test_schema-v0.0.1')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [\n    \"test_schema-v1.0.0\",\n    \"test_schema-v0.0.1\"\n  ],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 11.111111,\n    \"lon\": 12.121212\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with no linked schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain('Missing Required Property')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.contain('The `linked_schemas` property is required.')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 11.111111,\n    \"lon\": 12.121212\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.equal('JSON Error')",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure detail`, () => {",
									"    pm.expect(jsonData.errors[0].detail).to.equal('The JSON document submitted could not be parsed.')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "INVALID",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with invalid pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 404`, () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[1].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[1].title).to.contain('Pattern Mismatch')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [\n    \"test_schema-v1.0\"\n  ],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 11.111111,\n    \"lon\": 12.121212\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile with no schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 400`, () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status 400`, () => {",
									"    pm.expect(jsonData.errors[0].status).to.equal(400)",
									"})",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct failure title`, () => {",
									"    pm.expect(jsonData.errors[0].title).to.contain('Not Enough Items')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 11.111111,\n    \"lon\": 12.121212\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile that validates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return correct message`, () => {",
									"    pm.expect(jsonData.meta.message).to.equal(\"The submitted profile was validated successfully to its linked schemas.\")",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"linked_schemas\": [\n    \"test_schema-v1.0.0\"\n  ],\n  \"name\": \"IC3 Dev\",\n  \"geolocation\": {\n    \"lat\": 11.111111,\n    \"lon\": 12.121212\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/validate",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"validate"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Validate profiles');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Store and query by primary_url",
			"item": [
				{
					"name": "Post node 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-7.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-8.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post node 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-9.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by primary_url 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least two results`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(2)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?primary_url=ic3.dev",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "primary_url",
									"value": "ic3.dev"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by primary_url 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least one result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(1)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?primary_url=third.ic3.dev",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "primary_url",
									"value": "third.ic3.dev"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Store and query by primary_url');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Multi-version schema search",
			"item": [
				{
					"name": "Post node 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmurations/test-profile-10.json\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{indexBaseUrl}}/nodes",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search all versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least ten results`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(10)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?schema=test_schema-v",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "schema",
									"value": "test_schema-v"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search v2.x.x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least ten result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(10)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?schema=Test_Schema-v2",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "schema",
									"value": "Test_Schema-v2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search v2.1.x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return status code 200`, () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(`${pm.variables.get(\"folder_name\")} - (${pm.variables.get(\"test_counter\")}) ${pm.info.requestName} - should return at least four result`, () => {",
									"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(4)",
									"})",
									"",
									"pm.variables.set(\"test_counter\", 0)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{indexBaseUrl}}/nodes?schema=test_schema-v2.1",
							"host": [
								"{{indexBaseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "schema",
									"value": "test_schema-v2.1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('folder_name','Multi-version schema search');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let currentCount = pm.variables.get(\"test_counter\")",
					"currentCount++",
					"pm.variables.set(\"test_counter\", currentCount)",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "test_counter",
			"value": "",
			"type": "string"
		}
	]
}
