{
	"info": {
		"_postman_id": "6514e2d1-3973-41ad-8fcf-1ce8328fd26d",
		"name": "Murmurations API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Index is live - GET /ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return \"pong!\"`, () => {",
							"    pm.response.to.have.body(\"pong!\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/ping",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Library is live - GET /ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return \"pong\"`, () => {",
							"    pm.response.to.have.body(\"pong\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{libraryBaseUrl}}/ping",
					"host": [
						"{{libraryBaseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Library returns a list of schemas - GET /schemas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should return at least 1 result`, () => {",
							"    pm.expect(jsonData.data.length).to.be.greaterThan(0)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{libraryBaseUrl}}/schemas",
					"host": [
						"{{libraryBaseUrl}}"
					],
					"path": [
						"schemas"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index does not find non-existent node - GET /node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should return \"message\" parameter`, () => {",
							"    pm.expect(jsonData).to.have.property(\"message\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return \"Could not find node_id\" message`, () => {",
							"    pm.expect(jsonData.message).to.contain(\"Could not find node_id\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes/:node_id",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes",
						":node_id"
					],
					"variable": [
						{
							"key": "node_id",
							"value": "999999",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Index does not accept missing profile_url - POST /nodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 400`, () => {",
							"    pm.response.to.have.status(400)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should return missing profile_url error message`, () => {",
							"    pm.expect(jsonData.message).to.eq(\"The profile_url parameter is missing.\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index accepts non-existent profile_url - POST /nodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"node0\", jsonData.data.node_id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmtest0.json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index returns failure info about non-existent profile_url - GET /node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should return \"message\" parameter`, () => {",
							"    pm.expect(jsonData.data).to.have.property(\"node_id\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return \"validation_failed\" message`, () => {",
							"    pm.expect(jsonData.data.status).to.contain(\"validation_failed\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return \"Could not read from profile_url`, () => {",
							"    pm.expect(jsonData.data.failure_reasons[0]).to.contain(\"Could not read from profile_url\")",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes/:node_id",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes",
						":node_id"
					],
					"variable": [
						{
							"key": "node_id",
							"value": "ee1014917fb0a89743af3e6600e860a7c19fb79941d53ac893a80b84eaf485c6",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Index removes non-existent profile_url - DELETE /nodes/{nodeId}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.environment.unset(\"node0\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes/:node_id",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes",
						":node_id"
					],
					"variable": [
						{
							"key": "node_id",
							"value": "{{node0}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Index accepts valid profile_url - POST /nodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"node1\", jsonData.data.node_id)",
							"",
							"pm.test(`${pm.info.requestName} - should return correct hash of profile_url`, () => {",
							"    pm.expect(jsonData.data.node_id).to.eq(\"b58552b11bb4aaec01cd50351d6476e0d094999e6a2ed24343597956ae78c93a\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmtest1.json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index returns details of validated profile - GET /nodes/{node_id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should not have _id property`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"_id\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should have node_id property`, () => {",
							"    pm.expect(jsonData.data).to.have.property(\"node_id\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return correct node_id`, () => {",
							"    pm.expect(jsonData.data.node_id).to.eq(\"b58552b11bb4aaec01cd50351d6476e0d094999e6a2ed24343597956ae78c93a\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return correct profile_url`, () => {",
							"    pm.expect(jsonData.data.profile_url).to.eq(\"https://ic3.dev/murmtest1.json\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return correct profile_hash`, () => {",
							"    pm.expect(jsonData.data.profile_hash).to.eq(\"520e7cb00c474c0ad6b438badde533342daaabcfeefcfe3bb4606b333bc71eae\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not return linked_schemas list`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"linked_schemas\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return correct status`, () => {",
							"    pm.expect(jsonData.data.status).to.eq(\"posted\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not have last_validated property`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"last_validated\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should have last_updated property`, () => {",
							"    pm.expect(jsonData.data).to.have.property(\"last_updated\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - last_updated property should be a number`, () => {",
							"    pm.expect(jsonData.data.last_updated).to.be.a(\"number\")",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes/:node_id",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes",
						":node_id"
					],
					"variable": [
						{
							"key": "node_id",
							"value": "{{node1}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Index does not remove existing profile_url - DELETE /nodes/{nodeId}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 400`, () => {",
							"    pm.response.to.have.status(400)",
							"})",
							"",
							"pm.environment.unset(\"node1\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes/:node_id",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes",
						":node_id"
					],
					"variable": [
						{
							"key": "node_id",
							"value": "{{node1}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Index accepts profile with validation errors - POST /nodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"node2\", jsonData.data.node_id)",
							"",
							"pm.test(`${pm.info.requestName} - should return correct hash of profile_url`, () => {",
							"    pm.expect(jsonData.data.node_id).to.eq(\"34fb67186ffa3b5c9481edf4c5edcc6564fba96ced7d069f9e96bdebce8d7e1c\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmtest2.json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index returns details of invalid profile - GET /nodes/{node_id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should not have _id property`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"_id\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should have node_id property`, () => {",
							"    pm.expect(jsonData.data).to.have.property(\"node_id\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return correct node_id`, () => {",
							"    pm.expect(jsonData.data.node_id).to.eq(\"34fb67186ffa3b5c9481edf4c5edcc6564fba96ced7d069f9e96bdebce8d7e1c\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return correct profile_url`, () => {",
							"    pm.expect(jsonData.data.profile_url).to.eq(\"https://ic3.dev/murmtest2.json\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not have profile_hash property`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"profile_hash\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not return linked_schemas list`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"linked_schemas\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should return validation_failed status`, () => {",
							"    pm.expect(jsonData.data.status).to.eq(\"validation_failed\")",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not have last_updated property`, () => {",
							"    pm.expect(jsonData.data).to.not.have.property(\"last_updated\")",
							"})",
							"",
							"pm.environment.unset(\"node2\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes/:node_id",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes",
						":node_id"
					],
					"variable": [
						{
							"key": "node_id",
							"value": "{{node2}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add search node 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"// var jsonData = pm.response.json();",
							"// pm.environment.set(\"search_node_1\", jsonData.data.node_id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmsearch1.json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add search node 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"// var jsonData = pm.response.json();",
							"// pm.environment.set(\"search_node_2\", jsonData.data.node_id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmsearch2.json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add search node 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"// var jsonData = pm.response.json();",
							"// pm.environment.set(\"search_node_3\", jsonData.data.node_id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"profile_url\": \"https://ic3.dev/murmsearch3.json\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{indexBaseUrl}}/nodes",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by geolocation range 10km",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should return at least one result`, () => {",
							"    pm.expect(jsonData.data.length).to.be.greaterThanOrEqual(1)",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not have last_validated property`, () => {",
							"    _.each(jsonData.data, (item) => {",
							"        pm.expect(jsonData.data).to.not.have.property(\"last_validated\")",
							"    })",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should have last_updated property`, () => {",
							"    _.each(jsonData.data, (item) => {",
							"        pm.expect(item).to.have.property(\"last_updated\")",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes?lat=51.493518&lon=0.009199&range=10km",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					],
					"query": [
						{
							"key": "schema",
							"value": "demo-v2",
							"disabled": true
						},
						{
							"key": "last_updated",
							"value": "1605031963",
							"disabled": true
						},
						{
							"key": "country",
							"value": "tw",
							"disabled": true
						},
						{
							"key": "locality",
							"value": "Paris",
							"disabled": true
						},
						{
							"key": "region",
							"value": "Greater London",
							"disabled": true
						},
						{
							"key": "lat",
							"value": "51.493518"
						},
						{
							"key": "lon",
							"value": "0.009199"
						},
						{
							"key": "range",
							"value": "10km"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by geolocation range 100mi",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`${pm.info.requestName} - should return status code 200`, () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(`${pm.info.requestName} - should return at least two results`, () => {",
							"    pm.expect(jsonData.data.length).to.greaterThanOrEqual(2)",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should not have last_validated property`, () => {",
							"    _.each(jsonData.data, (item) => {",
							"        pm.expect(jsonData.data).to.not.have.property(\"last_validated\")",
							"    })",
							"})",
							"",
							"pm.test(`${pm.info.requestName} - should have last_updated property`, () => {",
							"    _.each(jsonData.data, (item) => {",
							"        pm.expect(item).to.have.property(\"last_updated\")",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{indexBaseUrl}}/nodes?lat=51.493518&lon=0.009199&range=100mi",
					"host": [
						"{{indexBaseUrl}}"
					],
					"path": [
						"nodes"
					],
					"query": [
						{
							"key": "schema",
							"value": "demo-v2",
							"disabled": true
						},
						{
							"key": "last_updated",
							"value": "1605031963",
							"disabled": true
						},
						{
							"key": "country",
							"value": "tw",
							"disabled": true
						},
						{
							"key": "locality",
							"value": "Paris",
							"disabled": true
						},
						{
							"key": "region",
							"value": "Greater London",
							"disabled": true
						},
						{
							"key": "lat",
							"value": "51.493518"
						},
						{
							"key": "lon",
							"value": "0.009199"
						},
						{
							"key": "range",
							"value": "100mi"
						}
					]
				}
			},
			"response": []
		}
	]
}